import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

class Student {
    private String studentID;
    private String name;
    private int age;
    private List<String> courses;

    public Student(String studentID, String name, int age) {
        this.studentID = studentID;
        this.name = name;
        this.age = age;
        this.courses = new ArrayList<>();
    }

    public String getStudentID() {
        return studentID;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public List<String> getCourses() {
        return courses;
    }

    public void addCourse(String course) {
        courses.add(course);
    }

    public void displayStudentDetails() {
        System.out.println("Student ID: " + studentID);
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Courses: " + courses);
        System.out.println();
    }

    // Other relevant methods can be added here
}

public class StudentManagement {
    public static void main(String[] args) {
        List<Student> students = new ArrayList<>();

        // Add sample students with different courses
        Student student1 = new Student("S001", "Alice", 20);
        student1.addCourse("Math");
        student1.addCourse("Physics");

        Student student2 = new Student("S002", "Bob", 22);
        student2.addCourse("Computer Science");
        student2.addCourse("History");

        students.add(student1);
        students.add(student2);

        // Display details of all students
        System.out.println("Details of all students:");
        students.forEach(Student::displayStudentDetails);

        // Display students enrolled in a specific course
        String specificCourse = "Computer Science";
        System.out.println("Students enrolled in " + specificCourse + ":");
        students.stream()
                .filter(student -> student.getCourses().contains(specificCourse))
                .forEach(Student::displayStudentDetails);

        // Update the age of a specific student
        String studentToUpdateID = "S001";
        int newAge = 21;
        System.out.println("Updating age of student " + studentToUpdateID + " to " + newAge);
        students.stream()
                .filter(student -> student.getStudentID().equals(studentToUpdateID))
                .findFirst()
                .ifPresent(student -> student.age = newAge);

        // Display details of all students after the update
        System.out.println("Details of all students after the age update:");
        students.forEach(Student::displayStudentDetails);

        // Calculate and display the average age of all students
        double averageAge = students.stream()
                .mapToInt(Student::getAge)
                .average()
                .orElse(0.0);
        System.out.println("Average age of all students: " + averageAge);
    }
}
